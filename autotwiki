#!/usr/bin/python

import os
import re
import sys
import json
import string
import mechanize
from optparse import OptionParser
from datetime import (date, datetime, timedelta)

class Week(object):
    STARTS_ON_SUNDAY = False

    def __init__(self, week_number=None, year=None):
        d = datetime.now()
        if week_number is not None:
            if year is None:
                year = d.year
            assert type(week_number) is int
            assert type(year) is int

            # Calculate the first day in the given week
            fmt = '%Y-%U-%w' if Week.STARTS_ON_SUNDAY else '%Y-%W-%w'
            d = datetime.strptime('%04d-%02d-1' %(year, week_number), fmt)
            if date(year, 1, 4).isoweekday() > 4:
                d -= timedelta(days=7)

        self.date_in_week = datetime.date(d)

    @property
    def begin(self):
        """Returns a date object for the first day of the week"""
        weekday = self.date_in_week.isoweekday() % 7
        begin = self.date_in_week - timedelta(days=weekday)
        assert begin.isoweekday() == 7 # Sunday
        return begin

    @property
    def end(self):
        """Returns date object for the last day of the week"""
        end = self.begin + timedelta(days=6)
        assert end.isoweekday() == 6
        return end

    @property
    def number(self):
        """Returns the week number of the date"""
        return self.date_in_week.isocalendar()[1]

    @property
    def year(self):
        """Returns the year from the end of the week"""
        return self.end.year

    def description(self):
        """Return a description of the calendar week (Sunday to Saturday)
        containing the date d, avoiding repetition.

        >>> from datetime import date
        >>> Week(date(2013, 12, 30)).description()
        'Dec 29, 2013 - Jan 4, 2014'
        >>> Week(date(2014, 1, 25)).description()
        'Jan 19 - 25, 2014'
        >>> Week(date(2014, 1, 26)).description()
        'Jan 26 - Feb 1, 2014'
        """
        assert self.begin <= self.date_in_week <= self.end

        if self.begin.year != self.end.year:
            fmt = '{0:%b} {0.day}, {0.year} - {1:%b} {1.day}, {1.year}'
        elif self.begin.month != self.end.month:
            fmt = "{0:%b} {0.day} - {1:%b} {1.day}, {1.year}"
        else:
            fmt = "{0:%b} {0.day} - {1.day}, {1.year}"

        return fmt.format(self.begin, self.end)


class Autotwiki(object):
    def __init__(self):
        # Parse options
        parser = OptionParser(usage="%prog [OPTIONS] <repository>")
        parser.add_option('--config', action='store', type='str', dest='config',
                          help="Use specified config file location",
                          default='~/.config/autotwiki/config.json')
        parser.add_option('--debug', action='store_true', dest='debug',
                          help="Enable detailed debugging output",
                          default=False)
        parser.add_option('--dry-run', action='store_true', dest='dryrun',
                          help="Don't update the remote website",
                          default=False)
        parser.add_option('--new', action='store_true', dest='new',
                          help="Overwrite status page with new content generated from template",
                          default=False)
        parser.add_option('-v', '--version', action='store_true', dest='version_and_exit',
                          help="Print version number and exit",
                          default=False)
        parser.add_option('-w', '--week', action='store', type='int', dest='week_number',
                          help="Generate report for the given week number rather than current",
                          default=None)
        (self.options, self.args) = parser.parse_args()

        # Configuration
        config_filename = os.path.expanduser(self.options.config)
        with open(config_filename, 'r') as f:
            self.config = json.load(f)

    @property
    def dryrun(self):
        if self.options.dryrun:
            return True
        return self.config.get('dry-run', False)

# TODO: Move mechanize.Browser into a TwikiBrowser class
# TODO: Collect git stats via
#       git shortlog -sne
#       git log --since 01-01-2014 | git shortlog -sne

if __name__ == "__main__":
    # Configuration
    app = Autotwiki()

    if app.options.version_and_exit:
        print("autotwiki version 0.1")
        sys.exit(0)
    elif len(app.args) < 1:
        print("You must provide at least one repository")
        sys.exit(1)

    domain = app.config['domain']
    username = app.config['username']
    password = app.config['password']
    team = app.config['team']

    week = Week(app.options.week_number)

    local = True
    if not app.options.new:
        local = False
    if not app.dryrun:
        local = False

    text = ''
    if not local:
        # Browser
        br = mechanize.Browser()

        # Debugging
        if app.options.debug:
            br.set_debug_http(True)
            br.set_debug_redirects(True)
            br.set_debug_responses(True)

        # Credentials
        br.add_password(domain, username, password)

        url = "%s/bin/edit/%s/%sWeek%02dStatus%d" %(
            domain, team, username, week.number, week.year)
        r = br.open(url)

        # Select the first (index zero) form
        br.select_form(nr=0)

        if not app.options.new:
            text = br.form['text']

    if len(text) < 100:
        # Topic looks like it hasn't been created yet
        config_filename = os.path.expanduser(app.config['status-template'])
        with open(config_filename, 'r') as f:
            text = f.read()

    params = {
        'username':               username,
        'full_name':              username,
        'week_number':            str(week.number),
        'week_string':            week.description(),

        'patches_submitted_week': 1,
        'patches_landed_week':    1,
        'patches_reviewed_week':  1,
        'bugs_reported_week':     1,
        'bugs_fixed_week':        1,

        'patches_submitted_year': 1,
        'patches_landed_year':    1,
        'patches_reviewed_year':  1,
        'bugs_reported_year':     1,
        'bugs_fixed_year':        1,
        }
    text = string.Template(text).substitute(params)

    if app.dryrun:
        print text
        sys.exit(0)

    if not local:
        br.form['text'] = text
        br.submit()
        print br.response().read()
