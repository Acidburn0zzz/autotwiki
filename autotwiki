#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2014 Samsung Electronics, Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import sys
import json
import string
import mechanize
from optparse import OptionParser
from subprocess import (Popen, PIPE)
from datetime import (date, datetime, timedelta)

class Week(object):
    STARTS_ON_SUNDAY = False

    def __init__(self, week_number=None, year=None):
        d = datetime.now()
        if week_number is not None:
            if year is None:
                year = d.year
            assert type(week_number) is int
            assert type(year) is int

            # Calculate the first day in the given week
            fmt = '%Y-%U-%w' if Week.STARTS_ON_SUNDAY else '%Y-%W-%w'
            d = datetime.strptime('%04d-%02d-1' %(year, week_number), fmt)
            if date(year, 1, 4).isoweekday() > 4:
                d -= timedelta(days=7)

        self.date_in_week = datetime.date(d)

    @property
    def begin(self):
        """Returns a date object for the first day of the week"""
        weekday = self.date_in_week.isoweekday() % 7
        begin = self.date_in_week - timedelta(days=weekday)
        assert begin.isoweekday() == 7 # Sunday
        return begin

    @property
    def end(self):
        """Returns date object for the last day of the week"""
        end = self.begin + timedelta(days=6)
        assert end.isoweekday() == 6
        return end

    @property
    def number(self):
        """Returns the week number of the date"""
        return self.date_in_week.isocalendar()[1]

    @property
    def year(self):
        """Returns the year from the end of the week"""
        return self.end.year

    def description(self):
        """Return a description of the calendar week (Sunday to Saturday)
        containing the date d, avoiding repetition.

        >>> from datetime import date
        >>> Week(date(2013, 12, 30)).description()
        'Dec 29, 2013 - Jan 4, 2014'
        >>> Week(date(2014, 1, 25)).description()
        'Jan 19 - 25, 2014'
        >>> Week(date(2014, 1, 26)).description()
        'Jan 26 - Feb 1, 2014'
        """
        assert self.begin <= self.date_in_week <= self.end

        if self.begin.year != self.end.year:
            fmt = '{0:%b} {0.day}, {0.year} - {1:%b} {1.day}, {1.year}'
        elif self.begin.month != self.end.month:
            fmt = "{0:%b} {0.day} - {1:%b} {1.day}, {1.year}"
        else:
            fmt = "{0:%b} {0.day} - {1.day}, {1.year}"

        return fmt.format(self.begin, self.end)


class Autotwiki(object):
    def __init__(self):
        # Parse options
        parser = OptionParser(usage="%prog [OPTIONS] <repository>")
        parser.add_option('--config', action='store', type='str', dest='config',
                          help="Use specified config file location",
                          default='~/.config/autotwiki/config.json')
        parser.add_option('--debug', action='store_true', dest='debug',
                          help="Enable detailed debugging output",
                          default=False)
        parser.add_option('--dry-run', action='store_true', dest='dryrun',
                          help="Don't update the remote website",
                          default=False)
        parser.add_option('--new', action='store_true', dest='new',
                          help="Overwrite status page with new content generated from template",
                          default=False)
        parser.add_option('-v', '--version', action='store_true', dest='version_and_exit',
                          help="Print version number and exit",
                          default=False)
        parser.add_option('-w', '--week', action='store', type='int', dest='week_number',
                          help="Generate report for the given week number rather than current",
                          default=None)
        (self.options, self.args) = parser.parse_args()

        # Configuration
        config_filename = os.path.expanduser(self.options.config)
        with open(config_filename, 'r') as f:
            self.config = json.load(f)

    @property
    def dryrun(self):
        if self.options.dryrun:
            return True
        return self.config.get('dry-run', False)

class TwikiBrowser(object):
    def __init__(self, config):
        self.br = mechanize.Browser()
        self._url_loaded = None

        # Credentials
        self.domain = config['domain']
        self.username = config['username']
        self.team = config['team']
        password = config['password']
        self.br.add_password(self.domain, self.username, password)

    def set_debug(self, value):
        assert type(value) is bool
        self.br.set_debug_http(value)
        self.br.set_debug_redirects(value)
        self.br.set_debug_responses(value)

    def url_weekly_status(self, week):
        """Given a Week object, returns a url for the twiki status page"""
        return "%s/bin/edit/%s/%sWeek%02dStatus%d" %(
            self.domain, self.team, self.username, week.number, week.year)

    def get_page(self, url):
        self.br.open(url)
        self._url_loaded = url

        # Select the first (index zero) form
        self.br.select_form(nr=0)
        return self.br.form['text']

    def set_page(self, url, text):
        if url != self._url_loaded:
            self.get_page(url)
        self.br.form['text'] = text
        self.br.submit()
        return self.br.response().read()

def load_file(fname):
    filename = os.path.expanduser(fname)
    with open(filename, 'r') as f:
        text = f.read()
    return text

def update_repository(repo):
    p = Popen(["hooks/update_repository", repo], shell=False, stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print "Error (%d) updating %s:" %(p.returncode, repo)
        print out
        sys.stderr.write(err)
    return p.returncode == 0

def measure(hook, target, regex, begin_date=None, end_date=None):
    """Executes hook and returns total number of commits"""
    total = 0
    if begin_date is None:
        begin = 'Beginning'
    else:
        begin = begin_date.strftime('%m-%d-%Y')
    if end_date is None:
        end = 'End'
    else:
        end = end_date.strftime('%m-%d-%Y')
    cmd = ["hooks/%s" %(hook), target, begin, end]
    p = Popen(cmd, shell=False, stdout=PIPE, stderr=PIPE)
    errors = p.stderr.readlines()
    if len(errors)>0:
        sys.stderr.write("Error running command:  %s\n" %(' '.join(cmd)))
        sys.stderr.write('\n'.join(errors))
        sys.exit(3)
    for line in p.stdout.readlines():
        if not regex.search(line):
            continue
        value = line.split()[0]
        assert value.isdigit()
        total += int(value)
    return total


if __name__ == "__main__":
    # Configuration
    app = Autotwiki()

    if app.options.version_and_exit:
        print("autotwiki version 0.1")
        sys.exit(0)

    week = Week(app.options.week_number)
    week_0 = Week(0)

    local = True
    if not app.options.new:
        local = False
    if not app.dryrun:
        local = False

    page_params = {
        'username':                app.config['username'],
        'full_name':               app.config['username'],
        'week_number':             str(week.number),
        'week_string':             week.description(),
        'patch_table_rows':        ''
        }

    row_template = load_file(app.config['row-template'])

    # Collect statistics
    author = re.compile(app.config['name'])
    #print("%-30s %10s %10s %10s" %("Repository", "This Week", "This Year", "All Time"))
    for project in app.config['projects']:
        row_params = {
            'project_name': project['name'],

            'patches_submitted_this_week': 0,
            'patches_committed_this_week': 0,
            'patches_reviewed_this_week': 0,
            'bugs_fixed_this_week': 0,
            'enhancements_this_week': 0,
            'new_features_this_week': 0,
            'patches_for_gbm_request_this_week': 0,

            'patches_submitted_this_year': 0,
            'patches_committed_this_year': 0,
            'patches_reviewed_this_year': 0,
            'bugs_fixed_this_year': 0,
            'enhancements_this_year': 0,
            'new_features_this_year': 0,
            'patches_for_gbm_request_this_year': 0,

            'patches_submitted_all_time': 0,
            'patches_committed_all_time': 0,
            'patches_reviewed_all_time': 0,
            'bugs_fixed_all_time': 0,
            'enhancements_all_time': 0,
            'new_features_all_time': 0,
            'patches_for_gbm_request_all_time': 0,
            }
        for repo in project['repositories']:
            if not update_repository(repo['location']):
                sys.stderr.write("Error updating repository %s\n" %(repo['location']))
                sys.exit(1)

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        week.begin, week.end)
            row_params['patches_committed_this_week'] += c

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        week_0.begin, week.end)
            row_params['patches_committed_this_year'] += c

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        None, week.end)
            row_params['patches_committed_all_time'] += c

            submissions = project.get('submissions', None)
            if submissions is None:
                continue

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        week.begin, week.end)
            row_params['patches_submitted_this_week'] += c

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        week_0.begin, week.end)
            row_params['patches_submitted_this_year'] += c

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        None, week.end)
            row_params['patches_submitted_all_time'] += c
        #print("%-30s %10d %10d %10d" %(project['name'],
        #                               row_params['patches_committed_this_week'],
        #                               row_params['patches_committed_this_year'],
        #                               row_params['patches_committed_all_time']))

        # TODO: Pass the collected data to one or more formatters
        # TODO: Add the output of the formatters to params
        patch_table_row = string.Template(row_template).substitute(row_params)
        page_params['patch_table_rows'] += patch_table_row

    # Prepare to interact with the remote twiki site
    text = ''
    if not local:
        twiki = TwikiBrowser(app.config)
        twiki.set_debug(app.options.debug)

        # Retrieve the current status page text
        if not app.options.new:
            url = twiki.url_weekly_status(week)
            text = twiki.get_page(url)

    # If current status page is empty, load from the template
    if len(text) < 100:
        # Topic looks like it hasn't been created yet
        text = load_file(app.config['status-template'])

    text = string.Template(text).substitute(page_params)

    if app.dryrun:
        print page_params['patch_table_rows']
        #print text
        sys.exit(0)

    if not local:
        print twiki.set_page(url, text)
