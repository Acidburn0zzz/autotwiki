#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2014 Samsung Electronics, Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import sys
import json
import string
from argparse import ArgumentParser
from subprocess import (Popen, PIPE)

sys.path.insert(0, os.path.realpath(
        os.path.join(os.path.dirname(__file__), "..")))
from autotwiki.week import Week
from autotwiki.twiki_browser import TwikiBrowser

class Autotwiki(object):
    def __init__(self):
        # Parse options
        parser = ArgumentParser()
        parser.add_argument('--config', action='store', type=str, dest='config',
                            help='Use specified config file location',
                            default='~/.config/autotwiki/config.json')
        parser.add_argument('--debug', action='store_true', dest='debug',
                            help="Enable detailed debugging output",
                            default=False)
        parser.add_argument('--dry-run', action='store_true', dest='dryrun',
                            help="Do not update the remote website",
                            default=False)
        parser.add_argument('--new', action='store_true', dest='new',
                            help="Overwrite status page with new content generated from template",
                            default=False)
        parser.add_argument('-v', '--version', action='store_true', dest='version_and_exit',
                            help="Print version number and exit",
                            default=False)
        parser.add_argument('-w', '--week', action='store', type=int, dest='week_number',
                            help="Generate report for the given week number rather than current",
                            default=None)
        parser.add_argument('-y', '--year', action='store', type=int, dest='year_number',
                            help="Generate report for the given year rather than current",
                            default=None)
        self.options = parser.parse_args()

        # Configuration
        config_filename = os.path.expanduser(self.options.config)
        with open(config_filename, 'r') as f:
            self.config = json.load(f)

    @property
    def dryrun(self):
        if self.options.dryrun:
            return True
        return self.config.get('dry-run', False)

def load_file(fname):
    filename = os.path.expanduser(fname)
    with open(filename, 'r') as f:
        text = f.read()
    return text

def update_repository(repo):
    p = Popen(["hooks/update_repository", repo], shell=False, stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print "Error (%d) updating %s:" %(p.returncode, repo)
        print out
        sys.stderr.write(err)
    return p.returncode == 0

def measure(hook, target, regex, begin_date=None, end_date=None):
    """Executes hook and returns total number of commits"""
    total = 0
    if begin_date is None:
        begin = 'Beginning'
    else:
        begin = begin_date.strftime('%m-%d-%Y')
    if end_date is None:
        end = 'End'
    else:
        end = end_date.strftime('%m-%d-%Y')
    cmd = ["hooks/%s" %(hook), target, begin, end]
    p = Popen(cmd, shell=False, stdout=PIPE, stderr=PIPE)
    errors = p.stderr.readlines()
    if len(errors)>0:
        sys.stderr.write("Error running command:  %s\n" %(' '.join(cmd)))
        sys.stderr.write('\n'.join(errors))
        sys.exit(3)
    for line in p.stdout.readlines():
        if not regex.search(line):
            continue
        value = line.split()[0]
        assert value.isdigit()
        total += int(value)
    return total


if __name__ == "__main__":
    # Configuration
    app = Autotwiki()

    if app.options.version_and_exit:
        print("autotwiki version 0.1")
        sys.exit(0)

    week = Week(app.options.week_number, app.options.year_number)
    week_0 = Week(0)

    local = True
    if not app.options.new:
        local = False
    if not app.dryrun:
        local = False

    page_params = {
        'username':                app.config['username'],
        'full_name':               app.config['username'],
        'week_number':             str(week.number),
        'week_string':             week.description(),
        'patch_table_rows':        ''
        }

    row_template = load_file(app.config['row-template'])

    # Collect statistics
    author = re.compile(app.config['name'])
    #print("%-30s %10s %10s %10s" %("Repository", "This Week", "This Year", "All Time"))
    for project in app.config['projects']:
        row_params = {
            'project_name': project['name'],

            'patches_submitted_this_week': 0,
            'patches_committed_this_week': 0,
            'patches_reviewed_this_week': 0,
            'bugs_fixed_this_week': 0,
            'enhancements_this_week': 0,
            'new_features_this_week': 0,
            'patches_for_gbm_request_this_week': 0,

            'patches_submitted_this_year': 0,
            'patches_committed_this_year': 0,
            'patches_reviewed_this_year': 0,
            'bugs_fixed_this_year': 0,
            'enhancements_this_year': 0,
            'new_features_this_year': 0,
            'patches_for_gbm_request_this_year': 0,

            'patches_submitted_all_time': 0,
            'patches_committed_all_time': 0,
            'patches_reviewed_all_time': 0,
            'bugs_fixed_all_time': 0,
            'enhancements_all_time': 0,
            'new_features_all_time': 0,
            'patches_for_gbm_request_all_time': 0,
            }
        for repo in project['repositories']:
            if not update_repository(repo['location']):
                sys.stderr.write("Error updating repository %s\n" %(repo['location']))
                sys.exit(1)

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        week.begin, week.end)
            row_params['patches_committed_this_week'] += c

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        week_0.begin, week.end)
            row_params['patches_committed_this_year'] += c

            c = measure("commits_per_author",
                        repo['location'],
                        author,
                        None, week.end)
            row_params['patches_committed_all_time'] += c

            submissions = project.get('submissions', None)
            if submissions is None:
                continue

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        week.begin, week.end)
            row_params['patches_submitted_this_week'] += c

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        week_0.begin, week.end)
            row_params['patches_submitted_this_year'] += c

            c = measure(submissions['hook'],
                        submissions['author'],
                        re.compile(submissions['owner']),
                        None, week.end)
            row_params['patches_submitted_all_time'] += c
        #print("%-30s %10d %10d %10d" %(project['name'],
        #                               row_params['patches_committed_this_week'],
        #                               row_params['patches_committed_this_year'],
        #                               row_params['patches_committed_all_time']))

        # TODO: Pass the collected data to one or more formatters
        # TODO: Add the output of the formatters to params
        patch_table_row = string.Template(row_template).substitute(row_params)
        page_params['patch_table_rows'] += patch_table_row

    # Prepare to interact with the remote twiki site
    text = ''
    if not local:
        twiki = TwikiBrowser(app.config)
        twiki.set_debug(app.options.debug)

        # Retrieve the current status page text
        url = twiki.url_weekly_status(week)
        if not app.options.new:
            text = twiki.get_page(url)

    # If current status page is empty, load from the template
    if len(text) < 100:
        # Topic looks like it hasn't been created yet
        text = load_file(app.config['status-template'])

    text = string.Template(text).substitute(page_params)

    if app.dryrun:
        print page_params['patch_table_rows']
        #print text
        sys.exit(0)

    if not local:
        print twiki.set_page(url, text)
