#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2014 Samsung Electronics, Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime, date
from time import mktime
import feedparser
import sys

def error(message):
    sys.stderr.write("Error: %s\n" % message)
    sys.exit(2)

def parse_url(url):
    result = feedparser.parse(url)
    if not result:
        error("unable to connect to feed: %s" % url)
    if result.status != 200:
        error("invalid status: %d %s" % (result.status, url))
    if result.version != "atom10":
        error("invalid RSS feed type: %s" % result.version)
    if result.encoding != "utf-8":
        error("invalid encoding type: %s" % result.encoding)
    if result.bozo != 0:
        error("malformed feed url" % result.bozo)
    if url != result.href:
        error("feed URL and reference does not match")
    return result.entries

def parse_public_activity(username, start, end):
    def is_pull_request(id):
        tag, event = id.split(",")
        return "PullRequestEvent" in event

    request_counts = {}
    pull_request_count = 0
    PUB_ACTIVITY_FEED_URL = "https://github.com/{0}.atom"
    for entry in parse_url(PUB_ACTIVITY_FEED_URL.format(username)):
        if not is_pull_request(entry.id):
            continue
        as_datetime = datetime.fromtimestamp(mktime(entry.updated_parsed))
        if start is not None and start > as_datetime:
            continue
        if end is not None and end < as_datetime:
            continue
        owner = "{0}/{1}".format(*entry.link.split('/')[3:5])
        if owner not in request_counts.keys():
            request_counts[owner] = 0
        request_counts[owner] += 1
    return request_counts

def main(username, start, end):
    if start == 'Beginning':
        start_date = None
    else:
        start_date = datetime.strptime(start, "%m-%d-%Y")
    if end == 'End':
        end_date = None
    else:
        end_date = datetime.strptime(end, "%m-%d-%Y")
    submitted = parse_public_activity(username, start_date, end_date)
    for owner, count in submitted.items():
        print "{0} pull requests to {1}".format(count, owner)
    sys.exit()

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print "usage: %s <github-username> <begin-date> <end-date>"
        sys.exit(1)
    main(*sys.argv[1:])
